// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, z, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y, z,
 * according to the input bits zx, nx, zy, ny, f, no, and sel.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x, y, and z inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16], z[16],     // 16-bit inputs        
        zx, nx,                  // control signals for x
        zy, ny,                  // control signals for y
        f, no,                   // control signals for operation type and negation
        sel[2];                  // selector for operations with z
    OUT 
        out[16],                 // 16-bit output
        zr,                      // zero flag
        ng;                      // negative flag

    PARTS:
        // Set x to 0 if zx is 1
        Mux16(a=x, b=false, sel=zx, out=xZeroed);
        // Set y to 0 if zy is 1
        Mux16(a=y, b=false, sel=zy, out=yZeroed);

        // Negate the result of apply zx or zy if nx or ny is 1
        Not16(in=xZeroed, out=xNegated);
        Not16(in=yZeroed, out=yNegated);

        // Select between the result of apply zx or zy and negated x and y based on nx and ny
        Mux16(a=xZeroed, b=xNegated, sel=nx, out=xFinal);
        Mux16(a=yZeroed, b=yNegated, sel=ny, out=yFinal);

        // Perform AND or ADD operation based on f
        And16(a=xFinal, b=yFinal, out=andResult);
        Add16(a=xFinal, b=yFinal, out=addResult);
        Mux16(a=andResult, b=addResult, sel=f, out=operationResult);

        // Negate the operation result if no is 1
        Not16(in=operationResult, out=operationNegated);
        Mux16(a=operationResult, b=operationNegated, sel=no, out=finalOperationResult);

        // Handle operations with z based on sel
        Add16(a=finalOperationResult, b=z, out=addWithZ);
        Resta16(a=finalOperationResult, b=z, out=subWithZ);
        Opz(sel=sel, sub=subWithZ, add=addWithZ, noChanges=finalOperationResult, out=outputFinal);

        // Set flags for zero and negative results
        Sign(in=outputFinal, out=ng);
        Or16Way(in=outputFinal, out=orResult);
        Not(in=orResult, out=zr);

        // Output the final result
        And16(a=outputFinal, b=true, out=out);
}
